Metadata-Version: 2.4
Name: qplib
Version: 0.7.2
Summary: query language for pandas
Author-email: martin v <martinv16248@gmail.com>
License-Expression: MIT
Project-URL: Repository, https://github.com/MartinVoelkl94/qplib
Keywords: pandas,query,utility
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: IPython
Requires-Dist: ipywidgets
Requires-Dist: jinja2
Requires-Dist: openpyxl
Requires-Dist: jedi>=0.16
Requires-Dist: tomli
Provides-Extra: dev
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: ipykernel; extra == "dev"
Dynamic: license-file

# qplib

A query language for pandas data exploration/analysis/modification.

It is implemented as an [accessor extension](https://pandas.pydata.org/docs/development/extending.html), meaning it can be called from a dataframe without any further preparation by calling df.q() with a valid text string.

example:
```python
import qplib as qp

df = qp.get_df()


#"%" selects columns
#"%%" selects rows
#show all patients with ID > 2000
df.q(r'%id  %%>20000')

#select all patients whose name contains "j"
df.q(r'%name  %%?j')

#select all patients whose name contains "j" and "a"
df.q(r'%name  %%?j  &&?a')

#select all patients whose name contains "j" or "a"
df.q(r'%name  %%?j  //?a')
```

An interactive wrapper can be called with df.qi() to help with query creation and for exploring the syntax.  

Take a look at "interactive_demo.ipynb" in the github repo for a quick syntax introduction and more examples.

The query language allows for arbitrary code execution via eval(), please be aware of the risks.

Currently published on [testpypi](https://test.pypi.org/project/qplib/).

<br>
<br>




# other utilities


## logging with qp.log()

A small logger to be used in notebooks or the REPL. Makes it easier to keep track of outputs in large notebooks by providing color coded output. Does not log to file, but instead to a dataframe which can then be viewed at the end of the notebook.
<br>
<br>


## "bashlike" wrappers

While python has functions to achieve similar results as common bash commands, they are often more verbose, less intuitive if you are already used to the bash names and spread out over different modules and different namespaces in those modules (os, os.path, shutil, sys, ...).  
These wrappers use the same names as the bash commands and offer some additional functionality.


available wrappers:  
- qp.ls()  
- qp.lsr()  
- qp.pwd()  
- qp.cd()  
- qp.cp()  
- qp.mkdir()  
- qp.isdir()  
- qp.isfile()  
- qp.ispath()  
<br>
<br>


## type conversion 

Mostly wrappers for pandas functions but with some additional functionality and generally more lenient handling of edge cases. 

available functions:  
- qp.int()  
- qp.float()  
- qp.num()  
- qp.bool()  
- qp.date()  
- qp.datetime()  
- qp.na()  
- qp.nk()  
- qp.yn()  
- qp.type()  
<br>
<br>

